List comprehensions provide a concise way to create lists. 

It consists of brackets containing an expression followed by a for clause, then
zero or more for or if clauses. The expressions can be anything, meaning you can
put in all kinds of objects in lists.

The result will be a new list resulting from evaluating the expression in the
context of the for and if clauses which follow it. 

The list comprehension always returns a result list. 

new_list = [expression(i) for i in old_list if filter(i)]

squares = [x**2 for x in range(10)]

print squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

Inserting conditions
- if
- ifelse:
new_fellowship = [member if len(member)>=7 else '' for member in fellowship]

Dict comprehensions
a dict comprehension is the use of curly braces {} instead of []
members of the dictionary are created using a colon :, as in key:value

new_fellowship = {member:len(member) for member in fellowship}

Generator expression
uses parentheses () instead of brackets []

# List of strings
fellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']

# List comprehension
fellow1 = [member for member in fellowship if len(member) >= 7]

# Generator expression
fellow2 = (member for member in fellowship if len(member) >= 7)

Generator functions

functions that, like generator expressions, yield a series of values, instead of returning a single value. 

A generator function is defined as you do a regular function, but whenever it generates a value, it uses the keyword yield instead of return. 

# Define generator function get_lengths
def get_lengths(input_list):
    """Generator function that yields the
    length of the strings in input_list."""

    # Yield the length of a string
    for person in input_list:
        yield(len(person))
